function [risultati_esp, energia_finale_gas] = simula_espansione_gas(stato_iniziale, m_gas_costante, parametri, parametri_canna, h_conv_esp)
%SIMULA_ESPANSIONE_GAS Simula la fase di espansione dei gas post-combustione.
%
%   MODIFICATO: La simulazione continua fino a t_max_safety o finché
%               la pressione del gas scende a P_atmosferica.
%               Rimosso l'evento di uscita dalla canna.
%
%   [risultati_esp, energia_finale_gas] = SIMULA_ESPANSIONE_GAS(stato_iniziale, m_gas_costante, parametri, parametri_canna, h_conv_esp)
%   Simula l'espansione del gas e il moto del proiettile a partire da uno
%   stato iniziale definito, considerando il lavoro di espansione e lo
%   scambio termico con la canna (con un coefficiente h_conv specifico).
%   La massa del gas è assunta costante durante questa fase.
%   Attriti sono trascurati in questa versione semplificata per isolare
%   gli effetti termodinamici.
%
%   INPUT:
%   stato_iniziale: Struct con lo stato iniziale del sistema all'inizio
%                   dell'espansione considerata. Campi richiesti:
%                   - t_start: Tempo iniziale [s]
%                   - T_gas0: Temperatura iniziale gas [K]
%                   - x_p0: Posizione iniziale proiettile [m]
%                   - v_p0: Velocità iniziale proiettile [m/s]
%   m_gas_costante: Massa totale del gas (costante durante l'espansione) [kg]
%   parametri: Struct con i parametri generali (da carica_parametri_caso).
%              Campi richiesti: R_gas, gamma_i, b_i, m_p, A_b, D_bore, T0,
%                               t_max_safety, barrel_length, V0. % Aggiunto V0
%   parametri_canna: Struct con i parametri della canna.
%                    Campi richiesti: massa, cp. (Usati solo per contesto ora)
%   h_conv_esp: Coefficiente di scambio termico convettivo da usare
%               per questa simulazione di espansione [W/(m^2*K)].
%
%   OUTPUT:
%   risultati_esp: Struct con i risultati della simulazione di espansione:
%                  t, T_gas, x_p, v_p, Q_loss_exp, P_gas_calc.
%   energia_finale_gas: Struct con le energie finali del gas [J]:
%                       - U_gas_res: Energia interna residua finale.
%                       - KE_gas_est: Energia cinetica finale (stima).
%                       - Q_loss_durante_esp: Calore perso durante l'espansione.

% --- Validazione Input (base) ---
if ~isstruct(stato_iniziale) || ~isfield(stato_iniziale, 't_start') || ...
   ~isfield(stato_iniziale, 'T_gas0') || ~isfield(stato_iniziale, 'x_p0') || ...
   ~isfield(stato_iniziale, 'v_p0')
    error('La struttura ''stato_iniziale'' non è completa.');
end
if ~isnumeric(m_gas_costante) || m_gas_costante <= 0
    error('La massa del gas deve essere un numero positivo.');
end
% Aggiunto V0 ai parametri richiesti
req_params = {'R_gas', 'gamma_i', 'b_i', 'm_p', 'A_b', 'D_bore', 'T0', 't_max_safety', 'barrel_length', 'V0'};
for i=1:length(req_params)
    if ~isfield(parametri, req_params{i})
        error('La struttura ''parametri'' non contiene il campo necessario: %s', req_params{i});
    end
end
if ~isnumeric(h_conv_esp) || h_conv_esp < 0
    error('Il coefficiente h_conv_esp deve essere numerico e non negativo.');
end

% --- Parametri Locali ---
m_gas = m_gas_costante;
Cv_gas = parametri.R_gas / (parametri.gamma_i - 1);
T_barrel = parametri.T0; % Temperatura canna assunta costante
P_atm = 101325.0; % Pressione atmosferica standard [Pa]

% --- Condizioni Iniziali per ODE Espansione ---
% y_exp = [T_gas; x_p; v_p; Q_loss_exp]
y0_exp = [stato_iniziale.T_gas0; stato_iniziale.x_p0; stato_iniziale.v_p0; 0];

% --- Intervallo di Tempo ---
t_start = stato_iniziale.t_start;
t_end_max = parametri.t_max_safety;
if t_start >= t_end_max
    error('Tempo iniziale t_start (%.4f) è maggiore o uguale a t_max_safety (%.4f)', t_start, t_end_max);
end
tspan_exp = [t_start, t_end_max];

% --- Opzioni ODE Solver ---
% *** MODIFICATO: Rimosso barrelExitEvent, aggiunto atmosphericPressureEvent ***
options_exp = odeset(...
    'RelTol', 1e-5, ...
    'AbsTol', [1e-2, 1e-7, 1e-4, 1e-1], ... % Tolleranze per [T, x, v, Q]
    'NonNegative', [1, 3, 4], ... % T, v, Q >= 0 (x_p può essere negativo se parte prima di 0?) Meglio [1, 3, 4]
    'Events', @(t,y) atmosphericPressureEvent(t, y, m_gas, parametri, P_atm) ... % Nuovo evento
);

% --- Chiamata al Solutore ODE ---
fprintf('Avvio simulazione espansione da t=%.4f s (fino a P_atm=%.1f kPa o t=%.4f s)...\n', t_start, P_atm/1000, t_end_max);
try
    [t, y_sol, te, ye, ie] = ode45(@(t,y) odes_expansion_only(t, y, m_gas, Cv_gas, parametri, h_conv_esp, T_barrel), ...
                                   tspan_exp, y0_exp, options_exp);
    fprintf('Simulazione espansione terminata a t=%.4f s.\n', t(end));
    if ~isempty(ie)
         fprintf('  -> Evento Pressione Atmosferica raggiunto a t=%.6f s.\n', te(end));
    else
         warning('Simulazione espansione interrotta al tempo massimo t_max_safety (%.4f s) PRIMA di raggiungere la pressione atmosferica.', t(end));
    end
catch ME_ode_exp
    error('Errore durante la simulazione dell''espansione: %s', ME_ode_exp.message);
end

% --- Organizzazione Risultati ---
risultati_esp = struct();
risultati_esp.t = t;
risultati_esp.T_gas = y_sol(:, 1);
risultati_esp.x_p = y_sol(:, 2);
risultati_esp.v_p = y_sol(:, 3);
risultati_esp.Q_loss_exp = y_sol(:, 4); % Calore perso *durante* questa fase

% Ricalcola Pressione per output
P_gas_calc = zeros(size(t));
for i = 1:length(t)
    V_inst_i = parametri.V0 + parametri.A_b * risultati_esp.x_p(i);
    eff_vol_i = V_inst_i - m_gas * parametri.b_i;
    if eff_vol_i > 1e-9 % Evita divisione per zero
        P_gas_calc(i) = (m_gas * parametri.R_gas * risultati_esp.T_gas(i)) / eff_vol_i;
    else
        P_gas_calc(i) = P_gas_calc(max(1, i-1)); % Mantieni pressione precedente se volume non valido
    end
end
P_gas_calc = max(P_atm, P_gas_calc); % Minimo P_atm (o 1e3 se preferito)
risultati_esp.P_gas_calc = P_gas_calc;


% --- Calcolo Energie Finali Gas ---
energia_finale_gas = struct();
T_gas_exit = risultati_esp.T_gas(end);
v_exit = risultati_esp.v_p(end); % Velocità all'istante finale (che sia t_max o P_atm)

% Energia interna residua
energia_finale_gas.U_gas_res = m_gas * Cv_gas * T_gas_exit;

% Energia cinetica residua (stima)
k_gas_vel = 1.7; % Stesso fattore usato prima
v_gas_exit_est = k_gas_vel * v_exit;
energia_finale_gas.KE_gas_est = 0.5 * m_gas * v_gas_exit_est^2;

% Calore perso durante l'espansione
energia_finale_gas.Q_loss_durante_esp = risultati_esp.Q_loss_exp(end);

fprintf('--- Risultati Espansione Gas ---\n');
fprintf('  T Gas Finale: %.1f K\n', T_gas_exit);
fprintf('  V Proiettile Finale: %.1f m/s\n', v_exit);
fprintf('  Pressione Gas Finale: %.2f MPa\n', risultati_esp.P_gas_calc(end)/1e6);
fprintf('  Energia Interna Gas Residua: %.1f kJ\n', energia_finale_gas.U_gas_res / 1000);
fprintf('  Energia Cinetica Gas Residua (stima k=%.1f): %.1f kJ\n', k_gas_vel, energia_finale_gas.KE_gas_est / 1000);
fprintf('  Calore Perso durante Espansione: %.1f kJ\n', energia_finale_gas.Q_loss_durante_esp / 1000);
fprintf('  Energia Totale Gas Finale (U+KE): %.1f kJ\n', (energia_finale_gas.U_gas_res + energia_finale_gas.KE_gas_est)/1000);


end % Fine funzione simula_espansione_gas


% =========================================================================
% --- Funzione ODE Locale per la Sola Espansione (INVARIATA) ---
% =========================================================================
function dydt = odes_expansion_only(t, y, m_gas, Cv_gas, params, h_conv, T_barrel)
    % y = [T_gas; x_p; v_p; Q_loss_exp]

    T_gas = max(T_barrel, y(1)); % Temperatura gas >= T canna
    x_p   = y(2); % Permetti x_p di essere qualsiasi valore
    v_p   = max(0, y(3));
    % Q_loss_exp = y(4) % Non serve qui dentro

    % Estrai parametri necessari
    R_gas = params.R_gas;
    b_i = params.b_i;
    m_p = params.m_p;
    A_b = params.A_b;
    D_bore = params.D_bore;
    V0 = params.V0; % Volume iniziale camera originale

    % Calcoli Intermedi
    V_inst = V0 + A_b * x_p;
    V_inst = max(1e-12, V_inst); % Volume istantaneo
    effective_volume = V_inst - m_gas * b_i;
    effective_volume = max(1e-9, effective_volume); % Volume effettivo

    P_gas = (m_gas * R_gas * T_gas) / effective_volume;
    P_gas = max(1e3, P_gas); % Pressione minima (es. 1 kPa)

    % Calcolo Derivate
    dydt = zeros(4, 1);

    % dT_gas/dt (solo lavoro espansione e heat loss)
    work_done_rate = P_gas * A_b * v_p;
    A_camera_stimata = 1e-3; % Stesso valore usato in simulation_odes
    A_cilindro_scoperto = pi * D_bore * max(0, x_p); % Usa max(0, x_p) per area
    A_contact = A_camera_stimata + A_cilindro_scoperto;
    dQ_loss_dt = h_conv * A_contact * (T_gas - T_barrel);
    dQ_loss_dt = max(0, dQ_loss_dt);

    % Se v_p=0, niente lavoro e niente heat loss significativo (mantenuto)
    if v_p == 0
        work_done_rate = 0;
        dQ_loss_dt = 0; % O forse lasciare heat loss se T_gas > T_barrel? Dipende dal modello... lasciamo così per ora.
    end

    dT_dt_numerator = - work_done_rate - dQ_loss_dt;
    dT_dt_denominator = m_gas * Cv_gas;
    if abs(dT_dt_denominator) < 1e-9
        dydt(1) = 0; % Derivata T_gas
    else
        dydt(1) = dT_dt_numerator / dT_dt_denominator;
    end

    % dx_p/dt
    dydt(2) = v_p; % Derivata x_p

    % dv_p/dt (solo forza pressione, attrito trascurato qui)
    if m_p > 1e-9
        dydt(3) = (P_gas * A_b) / m_p; % Derivata v_p
    else
        dydt(3) = 0;
    end

    % dQ_loss_exp/dt
    dydt(4) = dQ_loss_dt; % Derivata Q_loss

end % Fine funzione odes_expansion_only


% =========================================================================
% --- NUOVA Funzione Evento Locale per Pressione Atmosferica ---
% =========================================================================
function [value, isterminal, direction] = atmosphericPressureEvent(t, y, m_gas, params, P_atm)
% Evento per fermare la simulazione quando P_gas <= P_atm
% INPUTS:
%   t, y: Tempo e stato corrente
%   m_gas: Massa costante del gas [kg]
%   params: Struct parametri (necessita R_gas, b_i, V0, A_b)
%   P_atm: Pressione atmosferica [Pa]
% OUTPUTS:
%   value: P_gas_calcolata - P_atm. Evento quando value <= 0.
%   isterminal: 1 (termina la simulazione)
%   direction: 0 (rileva sia zeri crescenti che decrescenti)

    % Estrai stato e parametri necessari
    T_gas = y(1);
    x_p   = y(2);
    R_gas = params.R_gas;
    b_i   = params.b_i;
    V0    = params.V0;
    A_b   = params.A_b;

    % Calcola Pressione Istantanea (stessa logica di odes_expansion_only)
    V_inst = V0 + A_b * x_p;
    V_inst = max(1e-12, V_inst);
    effective_volume = V_inst - m_gas * b_i;
    effective_volume = max(1e-9, effective_volume);

    if T_gas < 0 || effective_volume <= 1e-10 % Protezione aggiuntiva
         P_gas_calc = P_atm; % Se stato non valido, forza l'evento
    else
        P_gas_calc = (m_gas * R_gas * T_gas) / effective_volume;
    end
    P_gas_calc = max(0, P_gas_calc); % Assicura non negativa

    % Calcola valore evento
    value = P_gas_calc - P_atm; % L'evento si verifica quando P_gas <= P_atm (value <= 0)

    % Termina l'integrazione
    isterminal = 1;

    % Rileva quando la pressione scende sotto P_atm
    direction = 0; % Rileva tutti gli zeri (o -1 per rilevare solo discesa)

end % Fine funzione atmosphericPressureEvent
